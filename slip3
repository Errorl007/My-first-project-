
Slip 3
A)	Write a ‘java’ program to check whether given number is Armstrong or not. (Use static keyword)	[15 M]
import java.util.Scanner;

public class ArmstrongNumber {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a number: ");
        int number = scanner.nextInt();
        
        if (isArmstrong(number)) {
            System.out.println(number + " is an Armstrong number.");
        } else {
            System.out.println(number + " is not an Armstrong number.");
        }
    }

    public static boolean isArmstrong(int num) {
        int original = num;
        int sum = 0;
        int n = String.valueOf(num).length();
        
        while (num > 0) {
            int digit = num % 10;
            sum += Math.pow(digit, n);
            num /= 10;
        }
        
        return sum == original;
    }
}
B)	Define an abstract class Shape with abstract methods area () and volume (). Derive abstract class Shape into two classes Cone and Cylinder. Write a java Program
to calculate area and volume of Cone and Cylinder.(Use Super Keyword.)
[25 M]	
abstract class Shape {
    abstract double area();
    abstract double volume();
}

class Cone extends Shape {
    private double radius;
    private double height;

    public Cone(double radius, double height) {
        this.radius = radius;
        this.height = height;
    }

    @Override
    double area() {
        double slantHeight = Math.sqrt(radius * radius + height * height);
        return Math.PI * radius * (radius + slantHeight);
    }

    @Override
    double volume() {
        return (Math.PI * radius * radius * height) / 3;
    }
}

class Cylinder extends Shape {
    private double radius;
    private double height;

    public Cylinder(double radius, double height) {
        this.radius = radius;
        this.height = height;
    }

    @Override
    double area() {
        return 2 * Math.PI * radius * (radius + height);
    }

    @Override
    double volume() {
        return Math.PI * radius * radius * height;
    }
}

public class ShapeTest {
    public static void main(String[] args) {
        Shape cone = new Cone(5, 10);
        Shape cylinder = new Cylinder(5, 10);

        System.out.println("Cone Area: " + cone.area());
        System.out.println("Cone Volume: " + cone.volume());

        System.out.println("Cylinder Area: " + cylinder.area());
        System.out.println("Cylinder Volume: " + cylinder.volume());
    }
}


Q.2	Python:
A)	Write a Python program to check if a given key already exists in a dictionary. If key exists replace with another key/value pair.	[15 M]
def replace_key_value_pair(d, old_key, new_key, new_value):
    if old_key in d:
        d.pop(old_key)
        d[new_key] = new_value
    return d

# Sample dictionary
sample_dict = {'a': 1, 'b': 2, 'c': 3}

# Key to check and new key-value pair
old_key = 'b'
new_key = 'd'
new_value = 4

# Replace key-value pair if key exists
updated_dict = replace_key_value_pair(sample_dict, old_key, new_key, new_value)
print(updated_dict)
B)	Write a python script to define a class student having members roll no, name, age, gender. Create a subclass called Test with member marks of 3 subjects. Create three objects of the Test class and display all the details of the student with total marks.
[25 M]
class Student:
    def __init__(self, roll_no, name, age, gender):
        self.roll_no = roll_no
        self.name = name
        self.age = age
        self.gender = gender

    def display_details(self):
        print(f"Roll No: {self.roll_no}")
        print(f"Name: {self.name}")
        print(f"Age: {self.age}")
        print(f"Gender: {self.gender}")

class Test(Student):
    def __init__(self, roll_no, name, age, gender, marks1, marks2, marks3):
        super().__init__(roll_no, name, age, gender)
        self.marks1 = marks1
        self.marks2 = marks2
        self.marks3 = marks3

    def total_marks(self):
        return self.marks1 + self.marks2 + self.marks3

    def display_details(self):
        super().display_details()
        print(f"Marks1: {self.marks1}")
        print(f"Marks2: {self.marks2}")
        print(f"Marks3: {self.marks3}")
        print(f"Total Marks: {self.total_marks()}")

# Creating three objects of the Test class
student1 = Test(1, "Alice", 20, "Female", 85, 90, 88)
student2 = Test(2, "Bob", 21, "Male", 78, 82, 80)
student3 = Test(3, "Charlie", 22, "Male", 92, 88, 91)

# Displaying details of each student
print("Student 1 Details:")
student1.display_details()
print("\nStudent 2 Details:")
student2.display_details()
print("\nStudent 3 Details:")
student3.display_details()
